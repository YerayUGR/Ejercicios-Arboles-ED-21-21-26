--- -	2021-12-29 12:21:59.444326744 +0000
+++ /datos/Universidad/Segundo/ED/retos/Reto5/src/ejercicios.cpp	2021-12-29 12:21:29.112920300 +0000
@@ -1,3 +1,6 @@
+///////////////////////////////////////////////////////////////////////////////////////////////////////////
+//EJERCICIO 21
+///////////////////////////////////////////////////////////////////////////////////////////////////////////
 /**
  * @brief funcion auxiliar a pesointerior para trabajar con nodos de forma recursiva
  * @param n node a iterar del arbol
@@ -25,7 +28,7 @@
             if(*n == *n.left() + *n.right()){
                return pesointerior_nodo(n.left());
                return pesointerior_nodo(n.right());
-
+.
             }
    return false; //false en otro caso
 }
@@ -40,6 +43,9 @@
    return pesointerior_nodo(a.root());
 }
 
+///////////////////////////////////////////////////////////////////////////////////////////////////////////
+//EJERCICIO 24
+///////////////////////////////////////////////////////////////////////////////////////////////////////////
 /**
  * @brief devuelve la suma de los caminos cuyos nodos tienen valor par
  * @param a arbol a comprobar
@@ -61,6 +67,9 @@
    }
 }
 
+///////////////////////////////////////////////////////////////////////////////////////////////////////////
+//EJERCICIO 26
+///////////////////////////////////////////////////////////////////////////////////////////////////////////
 /**
  * @brief comprueba si un arbol dado contiene caminos ordenador de menor a mayor
  * @param a arbol a comprobar
@@ -90,16 +99,3 @@
 
    return false; //false en otro caso;
 }
-
-template <class T>
-ostream & operator << (ostream & os, bintree<T> &arb)
-{
-
-  cout << "Preorden:";
-
-  for (typename bintree<T>::preorder_iterator i = arb.begin_preorder(); i!=arb.end_preorder(); ++i)
-    cout << *i << " ";
-
-  cout << endl;
-  return os;
-}
\ No hay ningún carácter de nueva línea al final del fichero
